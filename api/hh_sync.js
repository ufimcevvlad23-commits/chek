import fetch from "node-fetch";

const BITRIX_WEBHOOK = "https://nta-company.bitrix24.ru/rest/56435/4z7sfmwa5fi3k9rz/";
const HH_ACCESS_TOKEN = "USERH6FI4QDCTBSH4Q35V15LBQ50JGO2HUTHI4SPALKNCJID7DQ87BU8IDJCLUMT"; // —Ç–æ–∫–µ–Ω hh.ru

// ID –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Å—Ç–∞–¥–∏–∏ (—Ç–≤–æ—ë)
const FUNNEL_ID = 44; // –ù–∞–π–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
const STAGE_ID = "C44:NEW"; // –î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏

export default async function handler(req, res) {
  try {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Bitrix24 ‚Üî hh.ru...");

    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ —Å hh.ru
    const hhResponse = await fetch("https://api.hh.ru/employers/me/vacancies", {
      headers: { Authorization: `Bearer ${HH_ACCESS_TOKEN}` },
    });

    if (!hhResponse.ok) {
      const errorText = await hhResponse.text();
      console.error("–û—à–∏–±–∫–∞ HH.ru:", errorText);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å hh.ru" });
    }

    const hhData = await hhResponse.json();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${hhData.items.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

    // 2Ô∏è‚É£ –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–∑–¥–∞–¥–∏–º —Å–¥–µ–ª–∫—É –≤ Bitrix24
    for (const vacancy of hhData.items) {
      const dealTitle = `–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫: ${vacancy.name}`;

      const dealData = {
        fields: {
          TITLE: dealTitle,
          CATEGORY_ID: FUNNEL_ID,
          STAGE_ID: STAGE_ID,
          SOURCE_ID: "HH",
          COMMENTS: `–í–∞–∫–∞–Ω—Å–∏—è: ${vacancy.name}, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ${vacancy.published_at}`,
        },
      };

      const bitrixResponse = await fetch(`${BITRIX_WEBHOOK}crm.deal.add.json`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(dealData),
      });

      const bitrixResult = await bitrixResponse.json();
      console.log("–°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞:", bitrixResult);
    }

    return res.status(200).json({ message: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    return res.status(500).json({ error: error.message });
  }
}
